--
-- Create Schema Script 
--   Database Version   : 11.2.0.2.0 
--   Toad Version       : 10.1.1.8 
--   DB Connect String  : XE 
--   Schema             : HR 
--   Script Created by  : HR 
--   Script Created at  : 3/8/2023 11:49:35 PM 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Indexes: 23        Columns: 25         
--   Procedures: 2      Lines of Code: 22 
--   Sequences: 6 
--   Tables: 11         Columns: 54         Constraints: 37     
--   Triggers: 4 
--   Views: 1           


CREATE SEQUENCE DEPARTMENTS_SEQ
  START WITH 280
  INCREMENT BY 10
  MAXVALUE 9990
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE EMPLOYEES_SEQ
  START WITH 207
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE LOCATIONS_SEQ
  START WITH 3300
  INCREMENT BY 100
  MAXVALUE 9900
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE PRODUCTS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SOFTWARE_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE USERS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE TABLE COUNTRIES
(
  COUNTRY_ID    CHAR(2 BYTE) CONSTRAINT COUNTRY_ID_NN NOT NULL,
  COUNTRY_NAME  VARCHAR2(40 BYTE),
  REGION_ID     NUMBER, 
  CONSTRAINT COUNTRY_C_ID_PK
 PRIMARY KEY
 (COUNTRY_ID)
)
ORGANIZATION INDEX
LOGGING
NOPARALLEL
MONITORING;


CREATE TABLE DEPARTMENT
(
  DEPARTMENT_ID    NUMBER(4),
  DEPARTMENT_NAME  VARCHAR2(30 BYTE) CONSTRAINT DEPT_NAME_NN NOT NULL,
  MANAGER_ID       NUMBER(6),
  LOCATION_ID      NUMBER(4)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EMPLOYEE
(
  EMPLOYEE_ID     NUMBER(6),
  FIRST_NAME      VARCHAR2(20 BYTE),
  LAST_NAME       VARCHAR2(25 BYTE) CONSTRAINT EMP_LAST_NAME_NN NOT NULL,
  EMAIL           VARCHAR2(25 BYTE) CONSTRAINT EMP_EMAIL_NN NOT NULL,
  PHONE_NUMBER    VARCHAR2(20 BYTE),
  HIRE_DATE       DATE CONSTRAINT EMP_HIRE_DATE_NN NOT NULL,
  JOB_ID          VARCHAR2(10 BYTE) CONSTRAINT EMP_JOB_NN NOT NULL,
  SALARY          NUMBER(8,2),
  COMMISSION_PCT  NUMBER(2,2),
  MANAGER_ID      NUMBER(6),
  DEPARTMENT_ID   NUMBER(4),
  SALARY_ID       NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE JOBS
(
  JOB_ID      VARCHAR2(10 BYTE),
  JOB_TITLE   VARCHAR2(35 BYTE) CONSTRAINT JOB_TITLE_NN NOT NULL,
  MIN_SALARY  NUMBER(6),
  MAX_SALARY  NUMBER(6)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE JOB_HISTORY
(
  EMPLOYEE_ID    NUMBER(6) CONSTRAINT JHIST_EMPLOYEE_NN NOT NULL,
  START_DATE     DATE CONSTRAINT JHIST_START_DATE_NN NOT NULL,
  END_DATE       DATE CONSTRAINT JHIST_END_DATE_NN NOT NULL,
  JOB_ID         VARCHAR2(10 BYTE) CONSTRAINT JHIST_JOB_NN NOT NULL,
  DEPARTMENT_ID  NUMBER(4)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LOCATIONS
(
  LOCATION_ID     NUMBER(4),
  STREET_ADDRESS  VARCHAR2(40 BYTE),
  POSTAL_CODE     VARCHAR2(12 BYTE),
  CITY            VARCHAR2(30 BYTE) CONSTRAINT LOC_CITY_NN NOT NULL,
  STATE_PROVINCE  VARCHAR2(25 BYTE),
  COUNTRY_ID      CHAR(2 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCTS
(
  PRODUCT_ID         NUMBER                     NOT NULL,
  PRODUCT_NAME       VARCHAR2(150 BYTE),
  PRODUCT_DETAIL_ID  NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PRODUCTS_DETAILS
(
  PRODUCT_DETAIL_ID  NUMBER                     NOT NULL,
  PRODUCT_PRICE      NUMBER(8,2),
  PRODUCT_DESC       VARCHAR2(1000 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REGIONS
(
  REGION_ID    NUMBER CONSTRAINT REGION_ID_NN   NOT NULL,
  REGION_NAME  VARCHAR2(25 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SALARY
(
  SALARY_ID  NUMBER                             NOT NULL,
  SALARY     NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE USERS
(
  USER_ID          NUMBER,
  USER_NAME        VARCHAR2(100 BYTE),
  USER_EMAIL       VARCHAR2(100 BYTE),
  USER_ADDRESS     VARCHAR2(100 BYTE),
  USER_GENDER      VARCHAR2(1 BYTE),
  USER_EXP_YEARS   NUMBER,
  USER_BIRTH_DATE  DATE,
  USER_HAS_CAR     NUMBER(1),
  USER_COUNTRY     VARCHAR2(500 BYTE),
  USER_PASSWORD    VARCHAR2(100 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;




CREATE UNIQUE INDEX DEPT_ID_PK ON DEPARTMENT
(DEPARTMENT_ID)
LOGGING
NOPARALLEL;


CREATE INDEX DEPT_LOCATION_IX ON DEPARTMENT
(LOCATION_ID)
LOGGING
NOPARALLEL;


CREATE INDEX EMP_DEPARTMENT_IX ON EMPLOYEE
(DEPARTMENT_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX EMP_EMAIL_UK ON EMPLOYEE
(EMAIL)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX EMP_EMP_ID_PK ON EMPLOYEE
(EMPLOYEE_ID)
LOGGING
NOPARALLEL;


CREATE INDEX EMP_JOB_IX ON EMPLOYEE
(JOB_ID)
LOGGING
NOPARALLEL;


CREATE INDEX EMP_MANAGER_IX ON EMPLOYEE
(MANAGER_ID)
LOGGING
NOPARALLEL;


CREATE INDEX EMP_NAME_IX ON EMPLOYEE
(LAST_NAME, FIRST_NAME)
LOGGING
NOPARALLEL;


CREATE INDEX JHIST_DEPARTMENT_IX ON JOB_HISTORY
(DEPARTMENT_ID)
LOGGING
NOPARALLEL;


CREATE INDEX JHIST_EMPLOYEE_IX ON JOB_HISTORY
(EMPLOYEE_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX JHIST_EMP_ID_ST_DATE_PK ON JOB_HISTORY
(EMPLOYEE_ID, START_DATE)
LOGGING
NOPARALLEL;


CREATE INDEX JHIST_JOB_IX ON JOB_HISTORY
(JOB_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX JOB_ID_PK ON JOBS
(JOB_ID)
LOGGING
NOPARALLEL;


CREATE INDEX LOC_CITY_IX ON LOCATIONS
(CITY)
LOGGING
NOPARALLEL;


CREATE INDEX LOC_COUNTRY_IX ON LOCATIONS
(COUNTRY_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX LOC_ID_PK ON LOCATIONS
(LOCATION_ID)
LOGGING
NOPARALLEL;


CREATE INDEX LOC_STATE_PROVINCE_IX ON LOCATIONS
(STATE_PROVINCE)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PRODUCTS_DETAILS_PK ON PRODUCTS_DETAILS
(PRODUCT_DETAIL_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PRODUCTS_PK ON PRODUCTS
(PRODUCT_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX REG_ID_PK ON REGIONS
(REGION_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX SALARY_PK ON SALARY
(SALARY_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX USERS_PK ON USERS
(USER_ID)
LOGGING
NOPARALLEL;


CREATE OR REPLACE PROCEDURE add_job_history
  (  p_emp_id          job_history.employee_id%type
   , p_start_date      job_history.start_date%type
   , p_end_date        job_history.end_date%type
   , p_job_id          job_history.job_id%type
   , p_department_id   job_history.department_id%type
   )
IS
BEGIN
  INSERT INTO job_history (employee_id, start_date, end_date,
                           job_id, department_id)
    VALUES(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);
END add_job_history;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE secure_dml
IS
BEGIN
  IF TO_CHAR (SYSDATE, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'
        OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN
	RAISE_APPLICATION_ERROR (-20205,
		'You may only make changes during normal office hours');
  END IF;
END secure_dml;
/

SHOW ERRORS;


CREATE OR REPLACE VIEW EMP_DETAILS_VIEW
AS 
SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
WITH READ ONLY;


CREATE OR REPLACE TRIGGER update_job_history
  AFTER UPDATE OF job_id, department_id ON EMPLOYEE
  FOR EACH ROW
BEGIN
  add_job_history(:old.employee_id, :old.hire_date, sysdate,
                  :old.job_id, :old.department_id);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER secure_employees
  BEFORE INSERT OR UPDATE OR DELETE ON EMPLOYEE
DISABLE
BEGIN
  secure_dml;
END secure_employees;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER PRODUCTS_TRG
BEFORE INSERT
ON PRODUCTS REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column PRODUCT_ID
IF :new.PRODUCT_ID IS NULL THEN
  :new.PRODUCT_ID := PRODUCTS_SEQ.nextval;
  END IF;
END PRODUCTS_TRG;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER USERS_TRG
BEFORE INSERT
ON USERS REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column USER_ID
IF :new.USER_ID  IS  NULL THEN
  :new.USER_ID := USERS_SEQ.nextval;
  END IF;
END USERS_TRG;
/
SHOW ERRORS;


ALTER TABLE DEPARTMENT ADD (
  CONSTRAINT DEPT_ID_PK
 PRIMARY KEY
 (DEPARTMENT_ID));

ALTER TABLE EMPLOYEE ADD (
  CONSTRAINT EMP_SALARY_MIN
 CHECK (salary > 0),
  CONSTRAINT EMP_EMP_ID_PK
 PRIMARY KEY
 (EMPLOYEE_ID));

ALTER TABLE JOBS ADD (
  CONSTRAINT JOB_ID_PK
 PRIMARY KEY
 (JOB_ID));

ALTER TABLE JOB_HISTORY ADD (
  CONSTRAINT JHIST_DATE_INTERVAL
 CHECK (end_date > start_date),
  CONSTRAINT JHIST_EMP_ID_ST_DATE_PK
 PRIMARY KEY
 (EMPLOYEE_ID, START_DATE));

ALTER TABLE LOCATIONS ADD (
  CONSTRAINT LOC_ID_PK
 PRIMARY KEY
 (LOCATION_ID));

ALTER TABLE PRODUCTS ADD (
  CONSTRAINT PRODUCTS_PK
 PRIMARY KEY
 (PRODUCT_ID));

ALTER TABLE PRODUCTS_DETAILS ADD (
  CONSTRAINT PRODUCTS_DETAILS_PK
 PRIMARY KEY
 (PRODUCT_DETAIL_ID));

ALTER TABLE REGIONS ADD (
  CONSTRAINT REG_ID_PK
 PRIMARY KEY
 (REGION_ID));

ALTER TABLE SALARY ADD (
  CONSTRAINT SALARY_PK
 PRIMARY KEY
 (SALARY_ID));

ALTER TABLE USERS ADD (
  CONSTRAINT USERS_PK
 PRIMARY KEY
 (USER_ID));

ALTER TABLE COUNTRIES ADD (
  CONSTRAINT COUNTR_REG_FK 
 FOREIGN KEY (REGION_ID) 
 REFERENCES REGIONS (REGION_ID));

ALTER TABLE DEPARTMENT ADD (
  CONSTRAINT DEPT_LOC_FK 
 FOREIGN KEY (LOCATION_ID) 
 REFERENCES LOCATIONS (LOCATION_ID),
  CONSTRAINT DEPT_MGR_FK 
 FOREIGN KEY (MANAGER_ID) 
 REFERENCES EMPLOYEE (EMPLOYEE_ID));

ALTER TABLE EMPLOYEE ADD (
  CONSTRAINT EMP_DEPT_FK 
 FOREIGN KEY (DEPARTMENT_ID) 
 REFERENCES DEPARTMENT (DEPARTMENT_ID),
  CONSTRAINT EMP_JOB_FK 
 FOREIGN KEY (JOB_ID) 
 REFERENCES JOBS (JOB_ID),
  CONSTRAINT EMP_MANAGER_FK 
 FOREIGN KEY (MANAGER_ID) 
 REFERENCES EMPLOYEE (EMPLOYEE_ID));

ALTER TABLE JOB_HISTORY ADD (
  CONSTRAINT JHIST_DEPT_FK 
 FOREIGN KEY (DEPARTMENT_ID) 
 REFERENCES DEPARTMENT (DEPARTMENT_ID),
  CONSTRAINT JHIST_EMP_FK 
 FOREIGN KEY (EMPLOYEE_ID) 
 REFERENCES EMPLOYEE (EMPLOYEE_ID),
  CONSTRAINT JHIST_JOB_FK 
 FOREIGN KEY (JOB_ID) 
 REFERENCES JOBS (JOB_ID));

ALTER TABLE LOCATIONS ADD (
  CONSTRAINT LOC_C_ID_FK 
 FOREIGN KEY (COUNTRY_ID) 
 REFERENCES COUNTRIES (COUNTRY_ID));

ALTER TABLE PRODUCTS ADD (
  CONSTRAINT PRODUCTS_R01 
 FOREIGN KEY (PRODUCT_DETAIL_ID) 
 REFERENCES PRODUCTS_DETAILS (PRODUCT_DETAIL_ID));